// begin header
// end header

toc::[]

== Setting up Certman-operator for local dev
=== Requirements
To develop certman you will need the following:

. Access to the hive repo
. Let’s Encrypt account id and private key.
. AWS keys and secret keys for the account you’re using.
. Am openshift test cluster

=== Setup Hive Dependencies
We don't need a running Hive to test and develop with. But we will need some CRDs from the project. Most importantly Certman Operator watches for ClusterDeployments and responds to that CR when the status is 'true'.

[source,bash]
git clone git@github.com:openshift/hive.git
oc create -f hive/config/crds

=== Instal CertificateRequet CRD
This is the object Certman Operator creates and uses to track certs it creates.

[source,bash]
git clone git@github.com:openshift/certman-operator.git
oc create -f certman-operator/deploy/crds/certman_v1alpha1_certificaterequest_crd.yaml

=== Make your Namespace
This where all of the certman objects will live

.If using OpenShift
[source,bash]
oc new-project certman-operator
oc project certman-operator


=== Setup your ConfigMap
Certman Operator uses a ConfigMap to store options. At the moment, there are 2 items that can be configured using ConfigMap, Let's Encrypt environment, and the defaul notifcation email.

.Example
[source,bash]
oc create configmap certman-operator \
    --from-literal=lets_encrypt_environment=staging \
    --from-literal=default_notification_email_address=foo@bar.com

1. lets_encrypt_environment - If set to staging, the certman operator will use Let's Encrypt staging environment. Set the value to production to point to Let's Encrypt production endpoint.
2. default_notification_email_address - Email address to which Let's Encrypt certificate expiry notifications should be sent.

=== Certman Operator Secrets
One Secret is required and in it we store the AWS credentials that we'll need for working with Route53.

[source,bash]
oc create secret generic aws-iam-secret --from-literal=aws_access_key_id=XXX --from-literal=aws_secret_access_key=YYYY

=== Service Accoutn and RBAC

[source,bash]
oc create -f deploy/role.yaml
oc create -f deploy/role_binding.yaml
oc create -f deploy/operator.yaml


=== Optional: Run Certman Operator
For local developement the easiest wasy is the use the operator-sdk cli. This will run from the local directory and use local KUBECONFIG environment variable, default ~/.kube/config.

[source,bash]
operator-sdk up local

=== Optional: Run in cluster
Or build and upload to a cluster
[source,bash]
operator-sdk build <your tag>
docker push <your tag>

Edit the operator.yaml with your tag. Then deploy to cluster.
[source,bash]
oc create -f deploy/operator.yaml

Happy Developing!